; captures:
;   0 - fragment
;   1 - scheme (likely http)
;   2 - abs uri
;   3 - rel uri
;   4 - authority
;   5 - query variables

uri             = [ absolute_uri | relative_uri ] [ "#" { fragment } ]

absolute_uri    = { scheme } ':' ( heir_part | opaque_part )
relative_uri    = ( net_path | abs_path | rel_path ) [ '?' query ]

heir_part       = ( net_path | abs_path ) [ '?' query ]
opaque_part     = uric_no_slash *uric

uric_no_slash   = ( unreserved | escaped | <;?:@&=+$,> )

net_path        = "//" authority [ abs_path ]
abs_path        = { '/' path_segments }
abs_path_noc    = '/' path_segments
rel_path        = { rel_segment [ abs_path_noc ] }

; this is a comment
rel_segment     = 1*( unreserved | escaped | <;@&=+$,> )

scheme          = alpha *( alpha | digit | <+-.> )

authority       = { server | reg_name }

reg_name        = 1*( unreserved | escaped | <$,;:@&=+> )

server          = [ [ userinfo '@' ] hostport ]
userinfo        = *( unreserved | escaped | <;:&=+$,> )

hostport        = host [ ':' port ]
host            = hostname | IPv4_address
hostname        = *( domainlabel '.' ) toplabel [ '.' ]
domainlabel     = alphanum | ( alphanum *( alphanum | '-' ) alphanum )
toplabel        = alpha | ( alpha *( alphanum | '-' ) alphanum )
IPv4_address    = 1*digit '.' 1*digit '.' 1*digit '.' 1*digit
port            = *digit

; path            = [ abs_path | opaque_part ]
path_segments   = segment *( '/' segment )
segment         = *pchar *( ';' param )
param           = *pchar
pchar           = ( unreserved | escaped | <:@&=+$,> )

query           = { *uric }

fragment        = *uric

uric            = reserved | unreserved | escaped
reserved        = ( <;/?:@&=+$,> )
unreserved      = alphanum | mark
mark            = ( <-_.!~*'()> )

escaped         = '%' hex hex
hex             = ( digit | <ABCDEFabcdef> )

alphanum        = alpha | digit
alpha           = lowalpha | upalpha

lowalpha        = <abcdefghijklmnopqrstuvwxyz>
upalpha         = <ABCDEFGHIJKLMNOPQRSTUVWXYZ>
digit           = <0123456789>
